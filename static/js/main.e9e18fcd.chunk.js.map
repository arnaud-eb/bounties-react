{"version":3,"sources":["getWeb3.js","IPFS.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","ipfs","require","host","port","protocol","getJSON","hash","catJSON","err","result","columns","dataField","text","sort","defaultSorted","order","App","props","componentDidMount","eth","getAccounts","accounts","net","getId","networkId","deployedNetwork","BountiesContract","networks","instance","Contract","abi","address","setState","account","bountiesInstance","alert","error","state","undefined","etherscanLink","bountyData","bountyDeadline","bountyAmount","bounties","handleChange","bind","handleIssueBounty","setLastTransactionDetails","component","this","getPastEvents","fromBlock","toBlock","events","event","getIssuedBounty","BountyIssued","on","target","name","value","obj","preventDefault","addJSON","then","methods","issueBounty","parseInt","Date","parse","send","from","utils","toWei","catch","txHash","etherscanBaseUrl","ipfsJson","returnValues","data","ipfsBaseUrl","concat","className","Container","Row","href","rel","Card","bg","border","style","width","Header","Body","Form","onSubmit","Group","controlId","Label","Control","as","placeholder","onChange","type","Button","striped","hover","keyField","Loader","color","size","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e9e18fcd.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","const IPFS = require(\"ipfs-mini\");\nconst ipfs = new IPFS({ host:'ipfs.infura.io', port: 5001, protocol: 'https' });\n\nexport const setJSON = (obj) => {\n    return new Promise((resolve, reject) => {\n        ipfs.addJSON(obj, (err, result) => {\n            if(err) {\n                reject(err);\n            } else {\n                resolve(result);\n            }\n        });\n    });\n}\n\nexport const getJSON = (hash) => {\n    return new Promise((resolve, reject) => {\n        ipfs.catJSON(hash, (err, result) => {\n            if(err) {\n                reject(err);\n            } else {\n                resolve(result);\n            }\n        });\n    });\n}","import React, { Component } from \"react\";\nimport BountiesContract from \"./contracts/Bounties.json\";\nimport getWeb3 from \"./getWeb3\";\nimport { setJSON, getJSON } from \"./IPFS.js\";\n\nimport { Loader } from \"rimble-ui\"; \nimport { Form, Button, Container, Row, Card } from \"react-bootstrap\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\n\nimport \"./App.css\";\n\nconst etherscanBaseUrl = \"https://rinkeby.etherscan.io\";\nconst ipfsBaseUrl = \"https://ipfs.infura.io/ipfs\";\nconst columns = [{ \n  dataField: 'bounty_id', \n  text: 'ID',\n  sort: true\n},\n{ \n  dataField: 'issuer', \n  text: 'Issuer'\n},\n{ \n  dataField: 'amount', \n  text: 'Amount'\n},\n{ \n  dataField: 'bountyData', \n  text: 'Bounty Data'\n},\n{ \n  dataField: 'ipfsData', \n  text: 'Bounty Data'\n}];\nconst defaultSorted = [{\n  dataField: 'bounty_id',\n  order: 'asc' \n}];\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      web3: null, \n      account: null, \n      bountiesInstance: undefined,\n      etherscanLink: \"https://rinkeby.etherscan.io\",\n      bountyData: undefined,\n      bountyDeadline: undefined,\n      bountyAmount: undefined,\n      bounties: []\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleIssueBounty = this.handleIssueBounty.bind(this);\n    this.setLastTransactionDetails = this.setLastTransactionDetails.bind(this);\n    // this.addEventListener = this.addEventListener.bind(this);\n  }\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = BountiesContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        BountiesContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3: web3, account: accounts[0], bountiesInstance: instance });\n      this.addEventListener(this);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  }\n\n  addEventListener(component) {\n    const bountiesInstance = this.state.bountiesInstance;\n    bountiesInstance.getPastEvents(\"BountyIssued\", {\n      fromBlock: 0, \n      toBlock: \"latest\"\n    }, function(err, events) {\n      if(!err) {\n        for(var event of events) {\n          component.getIssuedBounty(event, component);\n          // var ipfsJson = {};\n          // try {\n          //   ipfsJson = await getJSON(event.returnValues.data);\n          // } catch(error) {\n          //   console.log(error);\n          // }\n          // if(ipfsJson.bountyData !== undefined) {\n          //   event.returnValues['bountyData'] = ipfsJson.bountyData;\n          //   event.returnValues['ipfsData'] = ipfsBaseUrl+\"/\"+event.returnValues.data;\n          // } else {\n          //   event.returnValues['bountyData'] = event.returnValues.data;\n          //   event.returnValues['ipfsData'] = \"none\";\n          // }\n          // component.setState(state => ({\n          //   bounties: state.bounties.concat([event.returnValues])\n          // }));\n        }\n      }\n    });\n    bountiesInstance.events.BountyIssued({ fromBlock: 0 })\n    .on(\"data\", (event) => {\n      component.getIssuedBounty(event, component);\n      // var ipfsJson = {};\n      // try {\n      //   ipfsJson = await getJSON(event.returnValues.data);\n      // } catch(error) {\n      //   console.log(error);\n      // }\n      // if(ipfsJson.bountyData !== undefined) {\n      //   event.returnValues['bountyData'] = ipfsJson.bountyData;\n      //   event.returnValues['ipfsData'] = ipfsBaseUrl+\"/\"+event.returnValues.data;\n      // } else {\n      //   event.returnValues['bountyData'] = event.returnValues.data;\n      //   event.returnValues['ipfsData'] = \"none\";\n      // }\n      // component.setState(state => ({\n      //   bounties: state.bounties.concat([event.returnValues])\n      // }));\n    })\n    .on(\"error\", console.log);\n  }\n\n  //handle form data change\n  handleChange(event) {\n    switch(event.target.name) {\n      case \"bountyData\":\n        this.setState({ bountyData: event.target.value });\n        break;\n      case \"bountyDeadline\":\n        this.setState({ bountyDeadline: event.target.value });\n        break;\n      case \"bountyAmount\":\n        this.setState({ bountyAmount: event.target.value });\n        break;\n      default:\n        break;\n    }\n  }\n\n  handleIssueBounty(event) {\n    const { bountiesInstance, account, web3, bountyData, bountyDeadline, bountyAmount } = this.state;\n    if(typeof bountiesInstance !== \"undefined\") {\n      event.preventDefault();\n      setJSON({bountyData: bountyData})\n      .then(hash => {\n        bountiesInstance.methods.issueBounty(hash, parseInt(Date.parse(bountyDeadline))).send({from: account, value: web3.utils.toWei(bountyAmount)})\n        .on(\"transactionHash\", this.setLastTransactionDetails)\n        .on(\"error\", console.log)\n      })\n      .catch(console.log);\n    }\n  }\n\n  setLastTransactionDetails(txHash) {\n    if(typeof txHash !== \"undefined\") {\n      this.setState({ etherscanLink: etherscanBaseUrl+\"/tx/\"+txHash });\n    } else {\n      this.setState({ etherscanLink: etherscanBaseUrl });\n    }\n  }\n\n  async getIssuedBounty(event, component) {\n    var ipfsJson = {};\n    try {\n      ipfsJson = await getJSON(event.returnValues.data);\n    } catch(error) {\n      console.log(error);\n    }\n    if(ipfsJson.bountyData !== undefined) {\n      event.returnValues['bountyData'] = ipfsJson.bountyData;\n      event.returnValues['ipfsData'] = ipfsBaseUrl+\"/\"+event.returnValues.data;\n    } else {\n      event.returnValues['bountyData'] = event.returnValues.data;\n      event.returnValues['ipfsData'] = \"none\";\n    }\n    component.setState(state => ({\n      bounties: state.bounties.concat([event.returnValues])\n    }));\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return <Loader color=\"black\" size=\"80px\"/>;\n    }\n    return (\n      <div className=\"App\">\n        <Container>\n          <Row className=\"row\">\n            <a href={this.state.etherscanLink} target=\"_blank\" rel=\"noopener noreferrer\">Last Transaction Details</a>\n          </Row>\n          <Row className=\"row\">\n            <Card bg=\"dark\" text=\"white\" border=\"primary\" style={{width: \"100%\"}}> \n              <Card.Header>Issue Bounty</Card.Header>\n              <Card.Body>  \n                <Form onSubmit={this.handleIssueBounty}>\n                  <Form.Group controlId=\"formBountyData\">\n                    <Form.Label>Enter Bounty Data</Form.Label>\n                    <Form.Control as=\"textarea\" placeholder=\"Enter Bounty Details\" name=\"bountyData\" value={this.state.bountyData} onChange={this.handleChange} />\n                  </Form.Group>\n                  <Form.Group controlId=\"formBountyDeadline\">\n                    <Form.Label>Enter Bounty Deadline</Form.Label>\n                    <Form.Control type=\"datetime-local\" name=\"bountyDeadline\" value={this.state.bountyDeadline} onChange={this.handleChange} />\n                  </Form.Group>\n                  <Form.Group controlId=\"formBountyAmount\">\n                    <Form.Label>Enter Bounty Amount</Form.Label>\n                    <Form.Control type=\"text\" placeholder=\"Enter Bounty Amount\" name=\"bountyAmount\" value={this.state.bountyAmount} onChange={this.handleChange} />\n                  </Form.Group>\n                  <Button type=\"submit\">Issue Bounty</Button>\n                </Form>\n              </Card.Body>\n            </Card>\n          </Row>\n          <Row className=\"row\">\n            <Card>\n              <Card.Header>Issued Bounties</Card.Header>\n              <Card.Body>\n                <BootstrapTable striped hover keyField=\"bounty_id\" data={this.state.bounties} columns={columns} defaultSorted={defaultSorted}/>\n              </Card.Body>\n            </Card>\n          </Row>\n        </Container> \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}